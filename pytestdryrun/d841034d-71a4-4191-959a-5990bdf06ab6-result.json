{"name": "test_TC01_Automation[123-123-QA--]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchDriverException: Message: Unable to locate or obtain driver for chrome; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location", "trace": "self = <FixtureRequest for <Function test_TC01_Automation[123-123-QA--]>>, argname = 'init_driver'\n\n    def getfixturevalue(self, argname: str) -> Any:\n        \"\"\"Dynamically run a named fixture function.\n    \n        Declaring fixtures via function argument is recommended where possible.\n        But if you can only decide whether to use another fixture at test\n        setup time, you may use this function to retrieve it inside a fixture\n        or test function body.\n    \n        This method can be used during the test setup phase or the test run\n        phase, but during the test teardown phase a fixture's value may not\n        be available.\n    \n        :param argname:\n            The fixture name.\n        :raises pytest.FixtureLookupError:\n            If the given fixture could not be found.\n        \"\"\"\n>       fixturedef = self._get_active_fixturedef(argname)\n\nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:541: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:570: in _get_active_fixturedef\n    self._compute_fixture_value(fixturedef)\nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:647: in _compute_fixture_value\n    fixturedef.execute(request=subrequest)\nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:1079: in execute\n    result = ihook.pytest_fixture_setup(fixturedef=self, request=request)\nvenv\\Lib\\site-packages\\pluggy\\_hooks.py:501: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\nvenv\\Lib\\site-packages\\pluggy\\_manager.py:119: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\nvenv\\Lib\\site-packages\\_pytest\\setuponly.py:36: in pytest_fixture_setup\n    return (yield)\nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:1132: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\nvenv\\Lib\\site-packages\\_pytest\\fixtures.py:906: in call_fixture_func\n    fixture_result = next(generator)\nsteps\\conftest.py:19: in init_driver\n    driver = webdriver.Chrome(service=service,options=options)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\nvenv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:49: in __init__\n    self.service.path = DriverFinder.get_path(self.service, options)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nservice = <selenium.webdriver.chrome.service.Service object at 0x0000018739C924E0>\noptions = <selenium.webdriver.chrome.options.Options object at 0x000001873940C0B0>\n\n    @staticmethod\n    def get_path(service: Service, options: BaseOptions) -> str:\n        path = service.path\n        try:\n            path = SeleniumManager().driver_location(options) if path is None else path\n        except Exception as err:\n            msg = f\"Unable to obtain driver for {options.capabilities['browserName']} using Selenium Manager.\"\n            raise NoSuchDriverException(msg) from err\n    \n        if path is None or not Path(path).is_file():\n>           raise NoSuchDriverException(f\"Unable to locate or obtain driver for {options.capabilities['browserName']}\")\nE           selenium.common.exceptions.NoSuchDriverException: Message: Unable to locate or obtain driver for chrome; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors/driver_location\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\common\\driver_finder.py:44: NoSuchDriverException"}, "description": "../features/AutomationPractise.feature: Verify the User is able to add the products in QA environment", "parameters": [{"name": "_pytest_bdd_example", "value": "{'Username': '123', 'Password': '123', 'env': 'QA'}"}, {"name": "Username", "value": "''"}, {"name": "Password", "value": "''"}], "start": 1713670850130, "stop": 1713670850142, "uuid": "c791c5d0-16cb-4066-9b77-1a7d742ccfd2", "historyId": "568921c7cf2aa74c9e54589f010624f5", "testCaseId": "cfd181863037272bc7e3c4eef4a29f8c", "fullName": "steps.test_AutomationPractise#test_TC01_Automation", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('Username', 'Password')"}, {"name": "tag", "value": "TC01_Automation"}, {"name": "parentSuite", "value": "steps"}, {"name": "suite", "value": "test_AutomationPractise"}, {"name": "host", "value": "pranathi"}, {"name": "thread", "value": "7192-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "steps.test_AutomationPractise"}]}